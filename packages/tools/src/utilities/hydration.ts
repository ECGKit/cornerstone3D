import {
  Types,
  utilities,
  BaseVolumeViewport,
  StackViewport,
  VideoViewport,
  cache,
} from '@cornerstonejs/core';
import { Annotation } from '../types';
import { addAnnotation } from '../stateManagement';

function hydration(
  viewport: Types.IViewport,
  toolName: string,
  worldPoints: Types.Point3[],
  options?: {
    FrameOfReferenceUID?: string;
  }
): Annotation {
  const viewReference = viewport.getViewReference();
  const { viewPlaneNormal, FrameOfReferenceUID } = viewReference;
  const annotation = {
    annotationUID: utilities.uuidv4(),
    data: {
      handles: {
        points: worldPoints,
      },
    },
    highlighted: false,
    autoGenerated: false,
    invalidated: false,
    isLocked: false,
    isVisible: true,
    metadata: {
      toolName,
      viewPlaneNormal,
      FrameOfReferenceUID,
      referencedImageId: getReferencedImageId(
        viewport,
        worldPoints[0],
        viewPlaneNormal
      ),
      ...options,
    },
  };
  addAnnotation(annotation, viewport.element);
  return annotation;
}

function getReferencedImageId(
  viewport: Types.IViewport,
  worldPos: Types.Point3,
  viewPlaneNormal: Types.Point3
): string {
  const targetId = getTargetId(viewport);

  let referencedImageId;

  if (viewport instanceof StackViewport) {
    referencedImageId = targetId.split('imageId:')[1];
  } else if (viewport instanceof VideoViewport) {
    referencedImageId = targetId.split('videoId:')[1];
  } else {
    const volumeId = utilities.getVolumeId(targetId);
    const imageVolume = cache.getVolume(volumeId);

    referencedImageId = utilities.getClosestImageId(
      imageVolume,
      worldPos,
      viewPlaneNormal
    );
  }

  return referencedImageId;
}

function getTargetId(viewport: Types.IViewport): string | undefined {
  const targetId = viewport.getReferenceId?.();
  if (targetId) {
    return targetId;
  }
  if (viewport instanceof BaseVolumeViewport) {
    return `volumeId:${getTargetVolumeId(viewport)}`;
  }
  throw new Error('getTargetId: viewport must have a getTargetId method');
}

function getTargetVolumeId(viewport: Types.IViewport): string | undefined {
  const actorEntries = viewport.getActors();

  if (!actorEntries) {
    return;
  }
  return actorEntries.find(
    (actorEntry) => actorEntry.actor.getClassName() === 'vtkVolume'
  )?.uid;
}
export { hydration };
