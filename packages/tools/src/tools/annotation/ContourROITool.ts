import { getEnabledElement, utilities as csUtils } from '@cornerstonejs/core';
import type { EventTypes, PublicToolProps, ToolProps } from '../../types';
import PlanarFreehandContourSegmentationTool from './PlanarFreehandContourSegmentationTool';
import PlanarFreehandROITool from './PlanarFreehandROITool';
import { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';
import triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';
import InterpolationManager from '../../utilities/contourROITool/InterpolationManager';
import { InterpolationROIAnnotation } from '../../types/ToolSpecificAnnotationTypes';
import * as annotation from '../../stateManagement/annotation';

class ContourROITool extends PlanarFreehandROITool {
  constructor(toolProps: PublicToolProps = {}, defaultToolProps: ToolProps) {
    super(toolProps, defaultToolProps);
    this.configuration.allowOpenContours = false;
    this.configuration.interpolation.interpolateOnAdd = false;
    this.configuration.interpolation.interpolateOnEdit = false;
    InterpolationManager.addTool(ContourROITool.toolName);

    // Register event loops and rendering logic, which are stored in different
    // Files due to their complexity/size.
  }

  /**
   * Based on the current position of the mouse and the current image, creates
   * a `InterpolationROIAnnotation` and stores it in the annotationManager.
   *
   * @param evt - `EventTypes.NormalizedMouseEventType`
   * @returns The `InterpolationROIAnnotation` object.
   */
  addNewAnnotation = (
    evt: EventTypes.InteractionEventType
  ): InterpolationROIAnnotation => {
    const eventDetail = evt.detail;
    const { element } = eventDetail;
    const enabledElement = getEnabledElement(element);
    const { renderingEngine } = enabledElement;

    const viewportIdsToRender = getViewportIdsWithToolToRender(
      element,
      this.getToolName()
    );

    console.log('Creating new roi contour');
    const annotationData = this.createAnnotation(evt);

    annotation.state.addAnnotation(annotationData, element);
    this.activateDraw(evt, annotationData, viewportIdsToRender);
    evt.preventDefault();
    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);

    return annotationData;
  };

  protected createAnnotation(
    evt: EventTypes.InteractionEventType
  ): InterpolationROIAnnotation {
    const eventDetail = evt.detail;
    const { element } = eventDetail;
    const enabledElement = getEnabledElement(element);
    const { viewport } = enabledElement;

    const superData = super.createAnnotation(evt);

    return csUtils.deepMerge(superData, {
      metadata: {
        referencedSliceIndex: viewport.getCurrentImageIdIndex(),
      },
      data: {
        contour: {
          closed: true,
        },
      },
      interpolationUID: '',
      autoGenerated: false,
    });
  }
}

ContourROITool.toolName = 'ContourROI';
export default ContourROITool;
